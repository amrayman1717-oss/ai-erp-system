version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: erp-postgres
    environment:
      POSTGRES_DB: erp_system
      POSTGRES_USER: erp_user
      POSTGRES_PASSWORD: erp_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - erp-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: erp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - erp-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: erp-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://erp_user:erp_password@postgres:5432/erp_system
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key
      AI_SERVICES_URL: http://ai-services:8000
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - erp-network
    command: npm run dev

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: erp-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_AI_SERVICES_URL: http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - erp-network
    command: npm start

  # AI Services (Python FastAPI)
  ai-services:
    build:
      context: ./ai-services
      dockerfile: Dockerfile
    container_name: erp-ai-services
    environment:
      DATABASE_URL: postgresql://erp_user:erp_password@postgres:5432/erp_system
      REDIS_URL: redis://redis:6379
      OPENAI_API_KEY: your-openai-api-key
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./ai-services:/app
      - ai_models:/app/models
    networks:
      - erp-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

volumes:
  postgres_data:
  redis_data:
  ai_models:

networks:
  erp-network:
    driver: bridge